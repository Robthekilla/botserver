# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String!
  password: PasswordState
  validated: Boolean!
  isAdmin: Boolean!
  scripts(
    where: ScriptWhereInput! = {}
    orderBy: [ScriptOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Script!]
  scriptsCount(where: ScriptWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  name: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  validated: BooleanFilter
  isAdmin: BooleanFilter
  scripts: ScriptManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ScriptManyRelationFilter {
  every: ScriptWhereInput
  some: ScriptWhereInput
  none: ScriptWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  validated: OrderDirection
  isAdmin: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  password: String
  validated: Boolean
  isAdmin: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String! = ""
  password: String
  validated: Boolean
  isAdmin: Boolean
}

type Script {
  id: ID!
  name: String!
  author: User
  language: String!
  source: String!
  compiled: String!
  created_at: DateTime!
  updated_at: DateTime!
  bots(
    where: BotWhereInput! = {}
    orderBy: [BotOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Bot!]
  botsCount(where: BotWhereInput! = {}): Int
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ScriptWhereUniqueInput {
  id: ID
}

input ScriptWhereInput {
  AND: [ScriptWhereInput!]
  OR: [ScriptWhereInput!]
  NOT: [ScriptWhereInput!]
  id: IDFilter
  name: StringFilter
  author: UserWhereInput
  language: StringFilter
  created_at: DateTimeFilter
  updated_at: DateTimeFilter
  bots: BotManyRelationFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input BotManyRelationFilter {
  every: BotWhereInput
  some: BotWhereInput
  none: BotWhereInput
}

input ScriptOrderByInput {
  id: OrderDirection
  name: OrderDirection
  language: OrderDirection
  created_at: OrderDirection
  updated_at: OrderDirection
}

input ScriptUpdateInput {
  name: String
  language: String
  source: String
  bots: BotRelateToManyForUpdateInput
}

input BotRelateToManyForUpdateInput {
  disconnect: [BotWhereUniqueInput!]
  set: [BotWhereUniqueInput!]
  create: [BotCreateInput!]
  connect: [BotWhereUniqueInput!]
}

input ScriptUpdateArgs {
  where: ScriptWhereUniqueInput!
  data: ScriptUpdateInput!
}

input ScriptCreateInput {
  name: String! = ""
  author: UserRelateToOneForCreateInput
  language: String! = "ts"
  source: String! = ""
  bots: BotRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input BotRelateToManyForCreateInput {
  create: [BotCreateInput!]
  connect: [BotWhereUniqueInput!]
}

type Bot {
  id: ID!
  name: String!
  auth: String
  password: String
  script: Script
  parameter: JSON
  on: Boolean!
  console: String
}

input BotWhereUniqueInput {
  id: ID
  name: String
}

input BotWhereInput {
  AND: [BotWhereInput!]
  OR: [BotWhereInput!]
  NOT: [BotWhereInput!]
  id: IDFilter
  name: StringFilter
  auth: StringNullableFilter
  script: ScriptWhereInput
  on: BooleanFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input BotOrderByInput {
  id: OrderDirection
  name: OrderDirection
  auth: OrderDirection
  on: OrderDirection
}

input BotUpdateInput {
  name: String
  auth: String
  password: String
  script: ScriptRelateToOneForUpdateInput
  parameter: JSON
  on: Boolean
}

input ScriptRelateToOneForUpdateInput {
  create: ScriptCreateInput
  connect: ScriptWhereUniqueInput
  disconnect: Boolean
}

input BotUpdateArgs {
  where: BotWhereUniqueInput!
  data: BotUpdateInput!
}

input BotCreateInput {
  name: String! = ""
  auth: String
  password: String
  script: ScriptRelateToOneForCreateInput
  parameter: JSON
  on: Boolean
}

input ScriptRelateToOneForCreateInput {
  create: ScriptCreateInput
  connect: ScriptWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createScript(data: ScriptCreateInput!): Script
  createScripts(data: [ScriptCreateInput!]!): [Script]
  updateScript(where: ScriptWhereUniqueInput!, data: ScriptUpdateInput!): Script
  updateScripts(data: [ScriptUpdateArgs!]!): [Script]
  deleteScript(where: ScriptWhereUniqueInput!): Script
  deleteScripts(where: [ScriptWhereUniqueInput!]!): [Script]
  createBot(data: BotCreateInput!): Bot
  createBots(data: [BotCreateInput!]!): [Bot]
  updateBot(where: BotWhereUniqueInput!, data: BotUpdateInput!): Bot
  updateBots(data: [BotUpdateArgs!]!): [Bot]
  deleteBot(where: BotWhereUniqueInput!): Bot
  deleteBots(where: [BotWhereUniqueInput!]!): [Bot]
  endSession: Boolean!
  authenticateUserWithPassword(
    name: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String! = ""
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  scripts(
    where: ScriptWhereInput! = {}
    orderBy: [ScriptOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Script!]
  script(where: ScriptWhereUniqueInput!): Script
  scriptsCount(where: ScriptWhereInput! = {}): Int
  bots(
    where: BotWhereInput! = {}
    orderBy: [BotOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Bot!]
  bot(where: BotWhereUniqueInput!): Bot
  botsCount(where: BotWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
